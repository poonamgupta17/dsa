//to find the missing and the repeating number in an array of size n containing numbers from 1 to n

//better approach
//tc=O(n)
//sc=O(n)
#include<bits/stdc++.h>
using namespace std;
class Solution {
  public:
    vector<int> findTwoElement(vector<int>& arr) {
        // code here
        int n=arr.size();
        int missing=-1,repeating=-1;
        int hash[n+1]={0};
        for(int i=0;i<n;i++){
            hash[arr[i]]++;
            }
        for(int i=1;i<=n;i++){
            if(hash[i]==2)repeating=i;
            else if(hash[i]==0)missing=i;
            
            if(missing!=-1 && repeating!=-1)break;
        }    
            
        return {repeating,missing};
    }
};
//optimal approach
//tc=O(n)
//sc=O(1)
class Solution {
public:
    vector<int> findErrorNums(vector<int>& nums) {
        long long n=nums.size();
        long long sn= ((n)*(n+1))/2;
        long long sn2=((n)*(n+1)*((2*n)+1))/6;
        long long s=0,s2=0;
        for(int i=0;i<n;i++){
            s=s+nums[i];
            s2=s2+(nums[i]*nums[i]);
        }
        long long val1=s-sn;
        long long val2=s2-sn2;
        val2=(val2)/(val1);
        long long x=((val1)+(val2))/2;  //x=repeating,y=missing
        long long y=x-(val1);
        return{int(x),int(y)};      
    }
};