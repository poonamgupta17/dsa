//to find the length of the longest subarray with a sum of k
//tc=O(NlogN) 
//space complexity=O(N)

//using hashing(optimal for +ve,-ve and 0s)
#include<bits/stdc++.h> 
using namespace std;
class Solution {
  public:
    int longestSubarray(vector<int>& arr, int k) {
        // code here
        int n=arr.size();
        map<long long,int>presum;
        long long sum=0;
        int maxlen=0;
        for(int i=0;i<n;i++){
            sum+=arr[i];
            if(sum==k){
                maxlen=max(maxlen,i+1);
            }
            long long rem=sum-k;
            if(presum.find(rem)!=presum.end()){
                int len=i-presum[rem];
                maxlen=max(maxlen,len);
            }
            if(presum.find(sum)==presum.end()){
                presum[sum]=i;
            }
            
        }
        return maxlen;
    }
};

//using two pointers(optimal for +ve numbers and 0s)
//tc=O(2N)
//space complexity=O(1)
class Solution {
  public:
    int longestSubarray(vector<int>& arr, int k) {
        // code here
        int n=arr.size();
        int left=0,right=0;
        long long sum=arr[0];
        int maxlen=0;
        while(right<n){
            
            while(left<=right && sum>k){
                sum-=arr[left];
                left++;
            }
            if(sum==k){
                maxlen=max(maxlen,right-left+1);
            }
            right++;
            if(right<n){
                sum+=arr[right];
            }
            
        }
        return maxlen;
    }
};